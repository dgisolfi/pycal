Pandoc (Meta {unMeta = fromList []})
 [Header 1 ("header-n823", [], []) [Str "pycal"]
 ,Header 3 ("header-n825", [], []) [Str "Version", Space, Str "0.0.1"]
 ,Header 3 ("header-n826", [], []) [Str "Author"]
 ,Para [Strong [Str "Daniel", Space, Str "Gisolfi"], Space, Str "-", Space, Emph [Str "All", Space, Str "current", Space, Str "work"], Space, Str "-", Space, Link ("", [], []) [Str "dgisolfi"] ("https://github.com/dgisolfi", "")]
 ,Div ("toc", [], []) [Para [Str "", Link ("", [], []) [Str "pycal"] ("#header-n823",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "Version", Space, Str "0.0.1"] ("#header-n825",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "Author"] ("#header-n826",""),LineBreak,Str "\t", Link ("", [], []) [Str "Section", Space, Str "1", Space, Str "Introduction"] ("#header-n829",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "1.1", Space, Str "Genealogy"] ("#header-n831",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "1.2", Space, Str "Hello", Space, Str "World"] ("#header-n833",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "1.3", Space, Str "Program", Space, Str "structure"] ("#header-n837",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "1.4", Space, Str "Types", Space, Str "and", Space, Str "Variables"] ("#header-n849",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "1.5", Space, Str "Statements", Space, Str "Differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"] ("#header-n851",""),LineBreak,Str "\t", Link ("", [], []) [Str "Section", Space, Str "2", Space, Str "Lexical", Space, Str "Structure"] ("#header-n863",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "2.1", Space, Str "Programs"] ("#header-n864",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "2.2", Space, Str "Grammers"] ("#header-n874",""),LineBreak,Str "\t\t\t", Link ("", [], []) [Str "2.2.1", Space, Str "Lexical", Space, Str "grammar", Space, Str "in", Space, Str "Pycal", Space, Str "differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"] ("#header-n876",""),LineBreak,Str "\t\t\t", Link ("", [], []) [Str "2.2.2", Space, Str "Syntactic", Space, Str "grammar", Space, Str "in", Space, Str "Pycal", Space, Str "differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"] ("#header-n879",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "2.3", Space, Str "Lexical", Space, Str "Analysis"] ("#header-n881",""),LineBreak,Str "\t\t\t", Link ("", [], []) [Str "2.3.1", Space, Str "Comments"] ("#header-n882",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "2.4", Space, Str "Tokens"] ("#header-n892",""),LineBreak,Str "\t\t\t", Link ("", [], []) [Str "2.4.1", Space, Str "Keywords", Space, Str "in", Space, Str "Pycal", Space, Str "differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"] ("#header-n899",""),LineBreak,Str "\t", Link ("", [], []) [Str "Section", Space, Str "3", Space, Str "Types"] ("#header-n907",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "3.1", Space, Str "Value", Space, Str "Types", Space, Str "in", Space, Str "Pycal", Space, Str "differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"] ("#header-n908",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "3.2", Space, Str "Reference", Space, Str "Types", Space, Str "in", Space, Str "Pycal", Space, Str "differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"] ("#header-n911",""),LineBreak,Str "\t", Link ("", [], []) [Str "Section", Space, Str "4", Space, Str "Example", Space, Str "Programs"] ("#header-n914",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "4.1", Space, Str "Caesar", Space, Str "Cipher"] ("#header-n915",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "4.2", Space, Str "Fibonacci"] ("#header-n918",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "4.3", Space, Str "Bubble", Space, Str "Sort"] ("#header-n921",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "4.4", Space, Str "Lambda", Space, Str "Functions"] ("#header-n924",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "4.5", Space, Str "Stack"] ("#header-n927","")]]
 ,Header 2 ("header-n829", [], []) [Str "Section", Space, Str "1", Space, Str "Introduction"]
 ,Para [Str "Pycal", Space, Str "(pronounced", Space, Str "“pie", Space, Str "cal”)", Space, Str "is", Space, Str "a", Space, Str "simple,", Space, Str "modern,", Space, Str "object-oriented,", Space, Str "and", Space, Str "dynamically-typed", Space, Str "programming", Space, Str "language.", Space, Str "Based", Space, Str "on", Space, Str "Python", Space, Str "and", Space, Str "Pascal,", Space, Str "but", Space, Str "differing", Space, Str "in", Space, Str "the", Space, Str "following", Space, Str "ways:"]
 ,Header 3 ("header-n831", [], []) [Str "1.1", Space, Str "Genealogy"]
 ,Para [Image ("",[],[]) [Str ""] ("/Users/daniel/git/pycal/images/Genealogy.png","fig:")]
 ,Header 3 ("header-n833", [], []) [Str "1.2", Space, Str "Hello", Space, Str "World"]
 ,Para [Str "The", Space, Str "most", Space, Str "basic", Space, Str "of", Space, Str "programs", Space, Str "implemented", Space, Str "in", Space, Str "pycal."]
 ,Para [Str "File", Space, Code ("", [], []) "hello.py", Str ":"]
 ,CodeBlock ("",["python"],[]) "#!/usr/bin/env pycal\nProgram HelloWorld\nprint('Hello World!')"
 ,Header 3 ("header-n837", [], []) [Str "1.3", Space, Str "Program", Space, Str "structure"]
 ,Para [Str "pycal", Space, Str "key", Space, Str "organizational", Space, Str "concepts"]
 ,BulletList [[Para [Str "In", Space, Str "the", Space, Str "very", Space, Str "first", Space, Str "line", Space, Str "of", Space, Str "a", Space, Str "pycal", Space, Str "file", Space, Str "a", Space, Str "shebang", Space, Str "should", Space, Str "be", Space, Str "placed,", Space, Str "the", Space, Str "pycal", Space, Str "shebang", Space, Str "is", Space, Str "as", Space, Str "follows", Space, Code ("", [], []) "#!/usr/bin/env pycal"]],[Para [Str "Programs", Space, Str "should", Space, Str "be", Space, Str "declared", Space, Str "and", Space, Str "given", Space, Str "a", Space, Str "name,", Space, Str "this", Space, Str "should", Space, Str "be", Space, Str "done", Space, Str "at", Space, Str "the", Space, Str "beginning", Space, Str "of", Space, Str "the", Space, Str "file", Space, Str "following", Space, Str "the", Space, Str "shebang"]],[Para [Str "Imports", Space, Str "must", Space, Str "be", Space, Str "declared", Space, Str "after", Space, Str "the", Space, Str "program", Space, Str "name"]]]
 ,Para [Str "File", Space, Code ("", [], []) "PizzaClass.py", Str ":"]
 ,CodeBlock ("",["python"],[]) "#!/usr/bin/env pycal\nProgram := PizzaClass\nclass Food =\n    def __init__(self, dish_name, place_origin) =\n        self.dish_name := dish_name\n        self.place_origin := place_origin\n        print('creating food object')\n    \n    def getDishName(self) =\n        return self.dish_name\n\n    def getOrigin(self) = \n        return self.place_origin\n    \n    def __del__(self) =\n        print('destroying food object')\n        \nclass Pizza(Food):\n    def __init__(self, toppings, size, price) =\n        Food.__init__(self, 'Pizza', 'Italy')\n        self.toppings := toppings\n        self.size := size\n        self.price := price\n\n    def getToppings(self) = \n        return self.toppings\n    \n    def getSize(self) = \n        return self.size\n    \n    def getPrice(self) = \n        return self.price\n       \nlarge_pepperoni_pie := Pizza(['pepperoni', 'cheese'], 'Large', 17.99)"
 ,Para [Str "declares", Space, Str "a", Space, Str "class", Space, Str "named", Space, Str "Food", Space, Str "which", Space, Str "has", Space, Str "methods", Space, Str "such", Space, Str "as,", Space, Code ("", [], []) "getDishName", Space, Str "and", Space, Code ("", [], []) "getOrigin", Str ".", Space, Str "The", Space, Str "Pizza", Space, Str "class", Space, Str "inherits", Space, Str "all", Space, Str "members", Space, Str "of", Space, Str "the", Space, Str "Food", Space, Str "class", Space, Str "as", Space, Str "well", Space, Str "as", Space, Str "contains", Space, Str "methods", Space, Str "of", Space, Str "its", Space, Str "own", Space, Str "like", Space, Code ("", [], []) "getToppings", Str ",", Space, Code ("", [], []) "getSize", Space, Str "and", Space, Code ("", [], []) "getPrice", Str ".", Space, Str "Each", Space, Str "class", Space, Str "also", Space, Str "contains", Space, Str "an", Space, Str "initializer", Space, Str "as", Space, Str "well", Space, Str "as", Space, Str "a", Space, Str "destructor", Space, Str "for", Space, Str "the", Space, Str "Food", Space, Str "class."]
 ,Header 3 ("header-n849", [], []) [Str "1.4", Space, Str "Types", Space, Str "and", Space, Str "Variables"]
 ,Para [Str "There", Space, Str "is", Space, Str "two", Space, Str "kind", Space, Str "of", Space, Str "type", Space, Str "in", Space, Str "pycal:", Space, Str "value", Space, Str "types", Space, Str "and", Space, Str "reference", Space, Str "types.", Space, Str "Variables", Space, Str "classified", Space, Str "as", Space, Str "value", Space, Str "types", Space, Str "store", Space, Str "their", Space, Str "assigned", Space, Str "data", Space, Str "directly", Space, Str "reference", Space, Str "types", Space, Str "however", Space, Str "store", Space, Str "references", Space, Str "to", Space, Str "the", Space, Str "assigned", Space, Str "data.", Space, Str "Reference", Space, Str "types", Space, Str "are", Space, Str "also", Space, Str "known", Space, Str "as", Space, Str "objects."]
 ,Header 3 ("header-n851", [], []) [Str "1.5", Space, Str "Statements", Space, Str "Differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"]
 ,Para [Strong [Str "Expression", Space, Str "Statement"]]
 ,CodeBlock ("",["python"],[]) "i := 10\nstr := 'fish'"
 ,Para [Strong [Str "Block", Space, Str "Creation", Space, Str "Indicator"]]
 ,CodeBlock ("",["python"],[]) "def foo() = \n    print('foo')"
 ,Para [Strong [Str "String", Space, Str "Declaration"]]
 ,CodeBlock ("",["shell"],[]) "str := `fish` # String declaration can also be done with the ' and \" characters"
 ,Para [Strong [Str "String", Space, Str "Concatenation"]]
 ,CodeBlock ("",["shell"],[]) "word1 := `method`\nword2 := `totaly`\nstr := `This ${word1} of concatanation is ${word2} not stolen from javascript.`"
 ,Para [Strong [Str "Type", Space, Str "Inference"]]
 ,CodeBlock ("",["python"],[]) "# When assigning values to variables, the type can be either inferred or specified. \n# Type Inference...\ni := 3\n# Specific type declaration must be done before the start of the function(for globals must be done after imports)\ndef add(a, b) =\n    a: int\n    b: int\n    return a + b"
 ,Header 2 ("header-n863", [], []) [Str "Section", Space, Str "2", Space, Str "Lexical", Space, Str "Structure"]
 ,Header 3 ("header-n864", [], []) [Str "2.1", Space, Str "Programs"]
 ,Para [Str "A", Space, Str "pycal", Space, Str "program", Space, Str "consists", Space, Str "of", Space, Str "one", Space, Str "or", Space, Str "more", Space, Str "source", Space, Str "files.", Space, Str "A", Space, Str "source", Space, Str "file", Space, Str "is", Space, Str "an", Space, Str "ordered", Space, Str "sequence", Space, Str "of", Space, Str "Unicode", Space, Str "characters.", Space]
 ,Para [Str "Conceptually", Space, Str "speaking,", Space, Str "a", Space, Str "program", Space, Str "is", Space, Str "compiled", Space, Str "using", Space, Str "three", Space, Str "steps:", Space]
 ,OrderedList (1,Decimal,Period) [[Para [Str "Transformation,", Space, Str "which", Space, Str "converts", Space, Str "a", Space, Str "file", Space, Str "from", Space, Str "a", Space, Str "particular", Space, Str "character", Space, Str "repertoire", Space, Str "and", Space, Str "encoding", Space, Str "scheme", Space, Str "into", Space, Str "a", Space, Str "sequence", Space, Str "of", Space, Str "Unicode", Space, Str "characters.", Space]],[Para [Str "Lexical", Space, Str "analysis,", Space, Str "which", Space, Str "translates", Space, Str "a", Space, Str "stream", Space, Str "of", Space, Str "Unicode", Space, Str "input", Space, Str "characters", Space, Str "into", Space, Str "a", Space, Str "stream", Space, Str "of", Space, Str "tokens.", Space]],[Para [Str "Syntactic", Space, Str "analysis,", Space, Str "which", Space, Str "translates", Space, Str "the", Space, Str "stream", Space, Str "of", Space, Str "tokens", Space, Str "into", Space, Str "executable", Space, Str "code.", Space]]]
 ,Header 3 ("header-n874", [], []) [Str "2.2", Space, Str "Grammers"]
 ,Para [Str "The", Space, Str "following", Space, Str "are", Space, Str "occurrences", Space, Str "where", Space, Str "pycal", Space, Str "differs", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal."]
 ,Header 4 ("header-n876", [], []) [Str "2.2.1", Space, Str "Lexical", Space, Str "grammar", Space, Str "in", Space, Str "Pycal", Space, Str "differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"]
 ,Para [Str "Pycal", Space, Str "syntax", Space, Str "is", Space, Str "a", Space, Str "combination", Space, Str "of", Space, Str "many", Space, Str "it's", Space, Str "two", Space, Str "parent", Space, Str "languages", Space, Str "so", Space, Str "it", Space, Str "is", Space, Str "quite", Space, Str "similar", Space, Str "however", Space, Str "like", Space, Str "it's", Space, Str "parent", Space, Str "Python", Space, Str "it", Space, Str "removes", Space, Str "the", Space, Str "character", Space, Str "data", Space, Str "type", Space, Str "instead", Space, Str "for", Space, Str "a", Space, Str "string", Space, Str "value", Space, Str "of", Space, Str "length", Space, Str "1.", Space]
 ,CodeBlock ("",["ruby"],[]) "<null_value>     => null\n<negated_value> => neg <val>\n                => -<val\n<char>          => <string>"
 ,Header 4 ("header-n879", [], []) [Str "2.2.2", Space, Str "Syntactic", Space, Str "grammar", Space, Str "in", Space, Str "Pycal", Space, Str "differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"]
 ,CodeBlock ("",["ruby"],[]) "<function_stmt>    => <identifier> =\n                    <stmt>\n# All other if else blocks follow the same syntax\n<if_stmt>         => <conditional_stmt> =\n                    <stmt>\n# All loop statements use the same syntax\n<loop_stmt>         => <logic_expr> = \n                    <stmt>"
 ,Header 3 ("header-n881", [], []) [Str "2.3", Space, Str "Lexical", Space, Str "Analysis"]
 ,Header 4 ("header-n882", [], []) [Str "2.3.1", Space, Str "Comments"]
 ,Para [Str "WIthin", Space, Str "Pycal", Space, Str "there", Space, Str "are", Space, Str "two", Space, Str "forms", Space, Str "of", Space, Str "comments,", Space, Str "both", Space, Str "inherited", Space, Str "from", Space, Str "its", Space, Str "parent", Space, Str "languages."]
 ,Para [Strong [Str "Single-line", Space, Str "Comments"], Space, Str "can", Space, Str "be", Space, Str "done", Space, Str "using", Space, Str "similar", Space, Str "syntax", Space, Str "as", Space, Str "python", Space, Str "for", Space, Str "example:"]
 ,CodeBlock ("",["python"],[]) "# A single line Comment."
 ,Para [Strong [Str "Multi-line", Space, Str "Comments"], Space, Str "can", Space, Str "be", Space, Str "done", Space, Str "using", Space, Str "similar", Space, Str "syntax", Space, Str "as", Space, Str "Pascal", Space, Str "for", Space, Str "example:"]
 ,CodeBlock ("",["pascal"],[]) "(*\n This is a multi-line comment.\n Additionally, curly braces can be used in place of \n the characters used in this example\n*)"
 ,Para [Strong [Str "Comment", Space, Str "Nesting"]]
 ,Para [Str "Much", Space, Str "like", Space, Str "how", Space, Str "Pascal", Space, Str "can", Space, Str "nest", Space, Str "comments", Space, Str "using", Space, Str "the", Space, Str "following", Space, Str "syntax", Space, Code ("", [], []) "{comment 1 (* comment 2 *)}", Space, Str "pycal", Space, Str "can", Space, Str "achieve", Space, Str "the", Space, Str "same", Space, Str "effect", Space]
 ,Para [Str "Example", Space, Str "1:", Space, Code ("", [], []) "(* Comment 1 #Comment 2 *)", Space]
 ,Para [Str "Example", Space, Str "2:", Space, Code ("", [], []) "{Comment 1 #Comment 2 }"]
 ,Header 3 ("header-n892", [], []) [Str "2.4", Space, Str "Tokens"]
 ,Para [Strong [Str "Identifier"], Space, Str "derived", Space, Str "from", Space, Str "both", Space, Str "parent", Space, Str "languages", Space, Str "-", Space, Str "These", Space, Str "are", Space, Str "names", Space, Str "of", Space, Str "symbols", Space, Str "that", Space, Str "the", Space, Str "programmer", Space, Str "defines.", Space, Str "Like", Space, Str "both", Space, Str "parent", Space, Str "languages,", Space, Str "they", Space, Str "can", Space, Str "be", Space, Str "changed", Space, Str "and", Space, Str "re-used.", Space]
 ,Para [Strong [Str "Operator"], Str "(OP)", Space, Str "derived", Space, Str "from", Space, Str "both", Space, Str "parent", Space, Str "languages", Space, Str "-", Space, Str "Symbols", Space, Str "used", Space, Str "to", Space, Str "denote", Space, Str "operations", Space, Str "example:", Space, Code ("", [], []) "+, =", Str "."]
 ,Para [Strong [Str "Keyword"], Space, Str "derived", Space, Str "from", Space, Str "both", Space, Str "parent", Space, Str "languages", Space, Str "-", Space, Str "Also", Space, Str "known", Space, Str "as", Space, Str "reserved", Space, Str "words,", Space, Str "they", Space, Str "are", Space, Str "used", Space, Str "to", Space, Str "define", Space, Str "the", Space, Str "syntax", Space, Str "and", Space, Str "structure", Space, Str "of", Space, Str "the", Space, Str "Pycal", Space, Str "language."]
 ,Para [Strong [Str "Literals"], Space, Str "derived", Space, Str "from", Space, Str "Python", Space, Str "-", Space, Str "Are", Space, Str "the", Space, Str "smallest", Space, Str "elements", Space, Str "within", Space, Str "programs", Space, Str "and", Space, Str "are", Space, Str "unbreakable."]
 ,Para [Strong [Str "Separators"], Space, Str "derived", Space, Str "from", Space, Str "Pascal", Space, Str "-", Space, Str "AKA", Space, Str "white", Space, Str "space."]
 ,Para [Strong [Str "Constants"], Space, Str "derived", Space, Str "from", Space, Str "Pascal", Space, Str "-", Space, Str "Numerical", Space, Str "or", Space, Str "character", Space, Str "constants", Space, Str "that", Space, Str "denote", Space, Str "actual", Space, Str "values."]
 ,Header 4 ("header-n899", [], []) [Str "2.4.1", Space, Str "Keywords", Space, Str "in", Space, Str "Pycal", Space, Str "differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"]
 ,Para [Str "A", Space, Strong [Emph [Str "keyword"]], Str ",", Space, Str "also", Space, Str "known", Space, Str "as", Space, Str "reserved", Space, Str "words,", Space, Str "are", Space, Str "used", Space, Str "to", Space, Str "define", Space, Str "the", Space, Str "syntax", Space, Str "and", Space, Str "structure", Space, Str "of", Space, Str "the", Space, Str "Pycal", Space, Str "language.", Space, Str "Much", Space, Str "like", Space, Str "Python,", Space, Str "all", Space, Str "keywords", Space, Str "are", Space, Str "in", Space, Str "lowercase,", Space, Str "this", Space, Str "allows", Space, Str "programmers", Space, Str "to", Space, Str "use", Space, Str "keywords", Space, Str "however", Space, Str "they", Space, Str "must", Space, Str "capitalize", Space, Str "on", Space, Str "one", Space, Str "or", Space, Str "all", Space, Str "of", Space, Str "the", Space, Str "letters", Space, Str "of", Space, Str "the", Space, Str "word."]
 ,Para [Emph [Str "New", Space, Str "Keywords"], Str ":"]
 ,Para [Strong [Str "neg"], Space]
 ,Para [Emph [Str "Removed", Space, Str "Keywords"], Str ":"]
 ,Para [Strong [Str "goto"], Space, Strong [Str "None"]]
 ,Para [Emph [Str "Altered", Space, Str "Keywords"], Str ":"]
 ,Para [Strong [Str "true"], Space, Strong [Str "false"]]
 ,Header 2 ("header-n907", [], []) [Str "Section", Space, Str "3", Space, Str "Types"]
 ,Header 3 ("header-n908", [], []) [Str "3.1", Space, Str "Value", Space, Str "Types", Space, Str "in", Space, Str "Pycal", Space, Str "differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"]
 ,Para [Strong [Str "float"], Space, Str "derived", Space, Str "from", Space, Str "python", Space, Str "replaces", Space, Str "the", Space, Strong [Str "Real"], Space, Str "datatype", Space, Str "from", Space, Str "Pascal.", Space, Str "Can", Space, Str "be", Space, Str "defined", Space, Str "as", Space, Str "a", Space, Str "single-precision", Space, Str "floating", Space, Str "point", Space, Str "value."]
 ,Header 3 ("header-n911", [], []) [Str "3.2", Space, Str "Reference", Space, Str "Types", Space, Str "in", Space, Str "Pycal", Space, Str "differing", Space, Str "from", Space, Str "Python", Space, Str "and", Space, Str "Pascal"]
 ,Para [Strong [Str "string"], Space, Str "derived", Space, Str "from", Space, Str "python", Space, Str "replaces", Space, Str "the", Space, Strong [Str "Char"], Space, Str "datatype", Space, Str "from", Space, Str "Pascal.", Space, Str "In", Space, Str "Pycal", Space, Str "a", Space, Str "char", Space, Str "can", Space, Str "be", Space, Str "thought", Space, Str "of", Space, Str "or", Space, Str "represented", Space, Str "as", Space, Str "a", Space, Str "string", Space, Str "of", Space, Str "length", Space]
 ,Header 2 ("header-n914", [], []) [Str "Section", Space, Str "4", Space, Str "Example", Space, Str "Programs"]
 ,Header 3 ("header-n915", [], []) [Str "4.1", Space, Str "Caesar", Space, Str "Cipher"]
 ,Para [Str "File", Space, Code ("", [], []) "CeasarCipher.py", Str ":"]
 ,CodeBlock ("",["python"],[]) "#!/usr/bin/env pycal\nProgram := CeasarCipher\n    \n# CeasarCipher module written in pycal\nog:string := `hal`\nkey:int := 6\n\ndef encrypt(str, key) = \n    a := ord(`a`)\n    return ''.join(chr((ord(char) - a + key) % 26 + a) for char in str.lower())\n\ndef decrypt(str, key) = \n    return encrypt(str, -key)\n\ndef solve(string, cur, lim) = \n    print(`Ceasar ${str(cur)}: ${encrypt(string, cur)}`)\n    if cur != lim =\n        solve(string, cur+1, lim)\n    else =\n        print(`done`)\n\nEncrypted := encrypt(og, key)\nDecrypted := decrypt(Encrypted, key)\nprint(`Original  --> ${og}`)\nprint(`Encrypted --> ${Encrypted}`)\nprint(`Decrypted --> ${Decrypted}`)\nsolve(og, 0, 26)"
 ,Header 3 ("header-n918", [], []) [Str "4.2", Space, Str "Fibonacci"]
 ,Para [Str "File", Space, Code ("", [], []) "Fibonacci.py", Str ":"]
 ,CodeBlock ("",["python"],[]) "#!/usr/bin/env pycal\nProgram := Fibonacci\n    \n# Fibonacci function written in pycal\ndef fibonacci(n) = \n    n:int\n    if n <= 1 =\n        return n\n    else =  \n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(`fibonacci ${fibonacci(7)}`)"
 ,Header 3 ("header-n921", [], []) [Str "4.3", Space, Str "Bubble", Space, Str "Sort"]
 ,Para [Str "File", Space, Code ("", [], []) "BubbleSort.py", Str ":"]
 ,CodeBlock ("",["python"],[]) "#!/usr/bin/env pycal\nProgram := BubbleSort\n\n# Bubble sort function written in pycal\ndef bubblesort(l) =\n  for i in range(len(l)) =\n    for j in range(len(l) - 1, i, neg(1)) =\n      if (l[j] < l[j - 1]) =\n        swap(A, j, j - 1)\n \ndef swap(l, x, y) =\n  tmp := l[x]\n  l[x] := l[y]\n  l[y] := tmp"
 ,Header 3 ("header-n924", [], []) [Str "4.4", Space, Str "Lambda", Space, Str "Functions"]
 ,Para [Str "File", Space, Code ("", [], []) "Lambda.py", Str ":"]
 ,CodeBlock ("",["python"],[]) "#!/usr/bin/env pycal\nProgram := Lambda\n    \ndouble := lambda x = x * 2\nsquare := lambda x = x * x\n    \nnums := [ 1, 2, 3, 4, 5]\nnum_list := list(map(lambda x: x * 2 , num_list))\n\nprint(double(5))\nprint(square(5))\nprint(num_list)"
 ,Header 3 ("header-n927", [], []) [Str "4.5", Space, Str "Stack"]
 ,Para [Str "File", Space, Code ("", [], []) "Stack.py", Str ":"]
 ,CodeBlock ("",["python"],[]) "#!/usr/bin/env pycal\nProgram := Stack\n\nclass Stack:\n     def __init__(self) =\n        self.items = []\n\n     def isEmpty(self) =\n        return self.items == []\n\n     def push(self, item) =\n        self.items.append(item)\n\n     def pop(self) =\n        return self.items.pop()\n\n     def peek(self) =\n        return self.items[len(self.items)-1]\n\n     def size(self) =\n        return len(self.items)\n\n     def __del__(self) =\n        print('destroying stack')\n\n\ns = Stack()\ns.push('a')\ns.push('b')\ns.push('c')\n\n# returns 3\nnum := s.size()\n# Returns top element\ntopElement = s.peek()\n# Returns last element in the stack\nelement := s.pop()"
 ,Para [Str ""]]